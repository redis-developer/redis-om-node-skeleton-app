openapi: 3.0.0
info:
  title: Redis OM for Node.js Skeleton API
  description: >
    A simple sample API that shows assorted ways to use Redis OM for
    Node.js with an Express applciation.
  version: 1.0.0

servers:
  - url: http://localhost:8080
  - url: https://app.example.com/v1

paths:
  /person:
    put:
      tags:
        - Person
      description: Creates a new person with the specified attributes
      summary: Create person
      operationId: createPerson
      requestBody:
        description: person
        required: true
        content:
          application/json:
            schema:
              title: person
              allOf:
                - $ref: "#/components/schemas/person"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/person_id"
                  - $ref: "#/components/schemas/person"
  /person/{id}:
    get:
      tags:
        - Person
      description: Gets a specific person by ID
      summary: Get person
      operationId: fetchPerson
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/person_id"
                  - $ref: "#/components/schemas/person"
    post:
      tags:
        - Person
      description: Updates a specific person
      summary: Update person
      operationId: updatePerson
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        description: person
        required: true
        content:
          application/json:
            schema:
              title: person
              allOf:
                - $ref: "#/components/schemas/person"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/person_id"
                  - $ref: "#/components/schemas/person"
    delete:
      tags: 
         - Person
      description: Deletes the person by ID
      summary: Delete person
      operationId: removePerson
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/person_id"
  /person/{id}/first-name:
    get:
      tags:
        - Name
      description: Gets a specific person's first name by ID
      summary: Get person's first name
      operationId: fetchPersonFirstName
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/person_id"
                  - $ref: "#/components/schemas/person_first_name"
    delete:
      tags: 
         - Name
      description: Deletes the person's first name by ID
      summary: Delete person's first name
      operationId: removePersonFirstName
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/person_id"
  /person/{id}/first-name/{first_name}:
    patch:
      tags: 
        - Name
      description: Updates the person's first name
      summary: Update person's fisrt name
      operationId: updatePersonFirstName
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/first_name"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/person_id"
                  - $ref: "#/components/schemas/person_first_name"
  /person/{id}/last-name:
    get:
      tags:
        - Name
      description: Gets a specific person's last name by ID
      summary: Get person's last name
      operationId: fetchPersonLastName
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/person_id"
                  - $ref: "#/components/schemas/person_last_name"
    delete:
      tags: 
         - Name
      description: Deletes the person's last name by ID
      summary: Delete person's last name
      operationId: removePersonLastName
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/person_id"
  /person/{id}/last-name/{last_name}:
    patch:
      tags: 
        - Name
      description: Updates the person's last name
      summary: Update person's last name
      operationId: updatePersonLastName
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/last_name"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/person_id"
                  - $ref: "#/components/schemas/person_last_name"
  /person/{id}/full-name:
    get:
      tags:
        - Name
      description: Gets a specific person's full name by ID
      summary: Get person's full name
      operationId: fetchPersonFullName
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/person_id"
                  - $ref: "#/components/schemas/person_full_name"
    delete:
      tags: 
         - Name
      description: Deletes the person's full name by ID
      summary: Delete person's full name
      operationId: removePersonFullName
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/person_id"
  /person/{id}/full-name/{first_name}/{last_name}:
    patch:
      tags: 
        - Name
      description: Updates the person's full name
      summary: Update person's full name
      operationId: updatePersonFullName
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/first_name"
        - $ref: "#/components/parameters/last_name"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/person_id"
                  - $ref: "#/components/schemas/person_full_name"
  /person/{id}/age:
    get:
      tags:
        - Age
      description: Gets a specific person's age by ID
      summary: Get person's age
      operationId: fetchPersonAge
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/person_id"
                  - $ref: "#/components/schemas/person_age"
    delete:
      tags: 
         - Age
      description: Deletes the person's age by ID
      summary: Delete person's age
      operationId: removePersonAge
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/person_id"
  /person/{id}/age/{age}:
    patch:
      tags: 
        - Age
      description: Updates the person's age
      summary: Update person's age
      operationId: updatePersonAge
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/age"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/person_id"
                  - $ref: "#/components/schemas/person_age"
  /person/{id}/verified:
    get:
      tags:
        - "Verification Status"
      description: Gets a specific person's verification status by ID
      summary: Get person's verifcation status
      operationId: fetchPersonVerificationStatus
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/person_id"
                  - $ref: "#/components/schemas/person_verified"
    delete:
      tags: 
         - "Verification Status"
      description: Deletes the person's verification status by ID
      summary: Delete person's verification status
      operationId: removePersonVerificationStatus
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/person_id"
  /person/{id}/verified/{verified}:
    patch:
      tags: 
        - "Verification Status"
      description: Updates the person's verification status
      summary: Update person's verification status
      operationId: updatePersonVerificationStatus
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/verified"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/person_id"
                  - $ref: "#/components/schemas/person_verified"

components:
  parameters:
    id:
      name: id
      in: path
      required: true
      description: The ID of the person to interact with
      schema:
        $ref: "#/components/schemas/id"
    first_name:
      name: first_name
      in: path
      required: true
      description: The first name of the person
      schema:
        $ref: "#/components/schemas/first_name"
    last_name:
      name: last_name
      in: path
      required: true
      description: The last name of the person
      schema:
        $ref: "#/components/schemas/last_name"
    age:
      name: age
      in: path
      required: true
      description: The age of the person
      schema:
        $ref: "#/components/schemas/age"
    verified:
      name: age
      in: path
      required: true
      description: The verification status of the person
      schema:
        $ref: "#/components/schemas/verified"

  schemas:
    person_id:
      type: object
      properties:
        entityId:
          $ref: "#/components/schemas/id"

    person:
      allOf:
        - $ref: "#/components/schemas/person_full_name"
        - $ref: "#/components/schemas/person_age"
        - $ref: "#/components/schemas/person_verified"
        - type: object
          properties:
            location:
              description: The location of the person on the globe
              $ref: "#/components/schemas/geo"
              nullable: true
            locationUpdated:
              description: >
                The date and time when the user last updated their location
                on the globe
              type: string
              format: date-time
              nullable: true
              example: 2022-03-01T12:34:56.123Z
            skills:
              description: A list of skills that the person possesses
              type: array
              items:
                type: string
              nullable: true
              example:
                - singing
                - songwriting
                - playwriting
            personalStatement:
              description: A statement about the person
              type: string
              nullable: true
              example: I like piña coladas and walks in the rain

    person_first_name:
      type: object
      properties:
        firstName:
          $ref: "#/components/schemas/first_name"

    person_last_name:
      type: object
      properties:
        lastName:
          $ref: "#/components/schemas/last_name"

    person_full_name:
      allOf:
        - $ref: "#/components/schemas/person_first_name"
        - $ref: "#/components/schemas/person_last_name"

    person_age:
      type: object
      properties:
        age:
          $ref: "#/components/schemas/age"

    person_verified:
      type: object
      properties:
        age:
          $ref: "#/components/schemas/verified"

    id:
      description: The ID of the person
      type: string
      example: 01FX8N39YVZRCQNAW0R5T53H5T

    first_name:
      description: The given name of the person
      type: string
      example: Rupert

    last_name:
      description: The surname of the person
      type: string
      example: Holmes

    age:
      description: The age of the person in years
      type: integer
      format: int32
      example: 75

    verified:
      description: If the person has been verified
      type: boolean
      example: false

    geo:
      type: object
      required:
        - longitude
        - latitude
      properties:
        longitude:
          description: The longitudinal position on the globe
          type: number
          format: float
          example: -2.518
        latitude:
          description: The latitudinal position on the globe
          type: number
          format: float
          example: 53.259
